// Generated by CoffeeScript 1.6.3
(function() {
  var MongoClient, restify, server;

  restify = require('restify');

  MongoClient = require('mongodb').MongoClient;

  server = restify.createServer({
    name: 'mycard-apis'
  });

  server.use(restify.acceptParser(server.acceptable));

  server.use(restify.authorizationParser());

  server.use(restify.dateParser());

  server.use(restify.queryParser());

  server.use(restify.jsonp());

  server.use(restify.gzipResponse());

  server.use(restify.bodyParser());

  server.use(restify.conditionalRequest());

  MongoClient.connect("mongodb:///tmp/mongodb-27017.sock,live.my-card.in:27017,master.my-card.in:27017/mycard?readPreference=nearest&replicaSet=mycard", {
    server: {
      auto_reconnect: true,
      poolSize: 5
    }
  }, function(err, db) {
    server.get('/decks/:user', function(req, res, next) {
      if (req.username !== req.params.user) {
        res.header('WWW-Authenticate', 'Basic realm="MyCard API"');
        res.send(401);
        return next(false);
      }
      return db.collection('users').findOne({
        name: req.params.user
      }, function(err, user) {
        if (err) {
          return next(err);
        }
        if (user == null) {
          return next(new restify.ResourceNotFoundError());
        }
        return db.collection('decks_new').find({
          user: user['_id'],
          deleted: {
            $ne: true
          }
        }).toArray(function(err, decks) {
          var deck, _i, _len;
          if (err) {
            return next(err);
          }
          for (_i = 0, _len = decks.length; _i < _len; _i++) {
            deck = decks[_i];
            deck['user'] = user;
            if (req.query['legacy_decksync_compatible']) {
              deck['cards'] = deck['card_usages'];
              delete deck['card_usages'];
            }
          }
          res.send(decks);
          return next();
        });
      });
    });
    server.get('/decks/:user/:name', function(req, res, next) {
      if (req.username !== req.params.user) {
        res.header('WWW-Authenticate', 'Basic realm="MyCard API"');
        res.send(401);
        return next(false);
      }
      return db.collection('users').findOne({
        name: req.params.user
      }, function(err, user) {
        /*return next(err) if err
        return next(new restify.ResourceNotFoundError()) unless user?
        db.collection('decks_new').find user: user['_id'], name: req.params.name, (err, deck)->
          return next(err) if err
          return next(new restify.ResourceNotFoundError()) unless deck?
          if deck['deleted']
            res.send(410);
            return next(false)
        
        
            next()
        */

      });
    });
    server.put("/decks/:user/:name", function(req, res, next) {
      if (req.username !== req.params.user) {
        res.header('WWW-Authenticate', 'Basic realm="MyCard API"');
        res.send(401);
        return next(false);
      }
      return db.collection('users').findOne({
        name: req.params.user
      }, function(err, user) {
        if (err) {
          return next(err);
        }
        if (user == null) {
          return next(new restify.ResourceNotFoundError());
        }
        return db.collection('decks_new').find({
          user: user['_id'],
          name: req.params.name
        }, function(err, deck) {
          var card_usages, updated_at;
          if (err) {
            return next(err);
          }
          updated_at = new Date(req.query['updated_at']);
          card_usages = null;
          if (deck != null) {
            if (deck['deleted'] || deck['updated_at'] <= updated_at) {
              if (deck['card_usages'] === card_usages) {
                return db.collection('decks_new').update({
                  _id: deck['_id']
                }, {
                  $set: {
                    updated_at: updated_at
                  },
                  $unset: {
                    deleted: ''
                  }
                }, function(err) {
                  if (err) {
                    return next(err);
                  }
                  res.send(204);
                  return next();
                });
              } else {
                return db.collection('deck_versions').insert({
                  deck: deck['_id'],
                  card_usages: card_usages,
                  version: deck['version'] + 1,
                  created_at: updated_at
                }, function(err, docs) {
                  if (err) {
                    return next(err);
                  }
                  return db.collection('decks_new').update({
                    _id: deck['_id']
                  }, {
                    $set: {
                      updated_at: updated_at,
                      card_usages: card_usages,
                      version: deck['version'] + 1
                    },
                    $unset: {
                      deleted: ''
                    }
                  }, function(err) {
                    if (err) {
                      return next(err);
                    }
                    res.setHeader('Location', "https://my-card.in/decks/" + req.param.user + "/" + req.param.name + ".json");
                    res.send(201);
                    return next();
                  });
                });
              }
            } else {
              return next(new restify.ConflictError());
            }
          } else {
            return db.collection('decks_new').insert({
              name: req.param.name,
              user: user['_id'],
              created_at: updated_at,
              updated_at: updated_at,
              card_usages: card_usages,
              version: 1
            }, function(err, deck) {
              if (err) {
                return next(err);
              }
              return db.collection('deck_versions').insert({
                deck: deck['_id'],
                card_usages: card_usages,
                version: 1,
                created_at: updated_at
              }, function(err) {
                if (err) {
                  return next(err);
                }
                res.setHeader('Location', "https://my-card.in/decks/" + req.param.user + "/" + req.param.name + ".json");
                res.send(201);
                return next();
              });
            });
          }
        });
      });
    });
    return server.del("/decks/:user/:name", function(req, res, next) {
      if (req.username !== req.params.user) {
        res.header('WWW-Authenticate', 'Basic realm="MyCard API"');
        res.send(401);
        return next(false);
      }
      return db.collection('users').findOne({
        name: req.params.user
      }, function(err, user) {
        if (err) {
          return next(err);
        }
        if (user == null) {
          return next(new restify.ResourceNotFoundError());
        }
        return db.collection('decks_new').find({
          user: user['_id'],
          name: req.params.name
        }, function(err, deck) {
          if (err) {
            return next(err);
          }
          if (deck == null) {
            return next(new restify.ResourceNotFoundError());
          }
          if (deck['deleted']) {
            res.send(410);
            return next();
          } else {
            return db.collection('decks_new').update({
              _id: deck['_id']
            }, {
              $set: {
                updated_at: new Date(),
                deleted: true
              }
            }, function(err) {
              if (err) {
                return next(err);
              }
              res.send(204);
              return next();
            });
          }
        });
      });
    });
  });

  server.listen(9004);

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
